{"ast":null,"code":"import React,{Suspense}from\"react\";import Header from\"./components/layout/Header\";import{NotificationContainer}from\"react-notifications\";import{Route,Redirect,Switch}from\"react-router-dom\";import{connect}from\"react-redux\";import Register from\"./components/Auth/Register\";import{loadStripe}from\"@stripe/stripe-js\";import{Elements}from\"@stripe/react-stripe-js\";import Layout from\"./components/layout\";import Home from\"./pages/Home\";import ModalContainer from\"./components/ModalContainer\";import Logout from\"./components/Auth/Logout\";import Checkout from\"./pages/Checkout\";var Content=React.lazy(function(){return import(\"./components/layout/Content\");});var VerifyEmail=React.lazy(function(){return import(\"./components/Auth/VerifyEmail\");});var stripePromise=loadStripe(\"pk_test_2do6pJchuMIGtZ2cqrLgDjM300sB7DRzbF\");// TIP: don't call loadStripe\n// only load once per page\nvar App=function App(_ref){var loggedIn=_ref.loggedIn,emailVerified=_ref.emailVerified;var routes;if(loggedIn&&!emailVerified){routes=React.createElement(Suspense,{fallback:React.createElement(\"div\",null,\"Loading...\")},React.createElement(Switch,null,React.createElement(Route,{exact:true,path:\"/verify-email\",component:VerifyEmail}),React.createElement(Redirect,{to:\"/verify-email\"})));}else if(loggedIn&&emailVerified){routes=React.createElement(Suspense,{fallback:React.createElement(\"div\",null,\"Loading...\")},React.createElement(Switch,null,React.createElement(Route,{exact:true,path:\"/home\",component:Content}),React.createElement(Route,{exact:true,path:\"/home/logout\",component:Logout}),React.createElement(Redirect,{to:\"/home\"})));}else{routes=React.createElement(Switch,null,React.createElement(Route,{exact:true,path:\"/\",component:Home}),React.createElement(Route,{exact:true,path:\"/premium\",component:Checkout}),React.createElement(Route,{exact:true,path:\"/signup\",component:Register}),React.createElement(Redirect,{to:\"/\"}));}return React.createElement(Layout,null,React.createElement(Elements,{stripe:stripePromise},routes),React.createElement(ModalContainer,null));};var mapStateToProps=function mapStateToProps(_ref2){var firebase=_ref2.firebase;return{loggedIn:firebase.auth.uid,emailVerified:firebase.auth.emailVerified};};export default connect(mapStateToProps)(App);","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/client/src/App.js"],"names":["React","Suspense","Header","NotificationContainer","Route","Redirect","Switch","connect","Register","loadStripe","Elements","Layout","Home","ModalContainer","Logout","Checkout","Content","lazy","VerifyEmail","stripePromise","App","loggedIn","emailVerified","routes","mapStateToProps","firebase","auth","uid"],"mappings":"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","sourcesContent":["import React, { Suspense } from \"react\";\r\nimport Header from \"./components/layout/Header\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Register from \"./components/Auth/Register\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport PropTypes from \"prop-types\";\r\nimport Layout from \"./components/layout\";\r\nimport Home from \"./pages/Home\";\r\nimport ModalContainer from \"./components/ModalContainer\";\r\nimport Logout from \"./components/Auth/Logout\";\r\nimport Checkout from \"./pages/Checkout\";\r\nconst Content = React.lazy(() => import(\"./components/layout/Content\"));\r\nconst VerifyEmail = React.lazy(() => import(\"./components/Auth/VerifyEmail\"));\r\n\r\nconst stripePromise = loadStripe(\"pk_test_2do6pJchuMIGtZ2cqrLgDjM300sB7DRzbF\");\r\n\r\n// TIP: don't call loadStripe\r\n// only load once per page\r\n\r\nconst App = ({ loggedIn, emailVerified }) => {\r\n  let routes;\r\n  if (loggedIn && !emailVerified) {\r\n    routes = (\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route exact path=\"/verify-email\" component={VerifyEmail} />\r\n          <Redirect to=\"/verify-email\" />\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  } else if (loggedIn && emailVerified) {\r\n    routes = (\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route exact path=\"/home\" component={Content} />\r\n          <Route exact path=\"/home/logout\" component={Logout} />\r\n          <Redirect to=\"/home\" />\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  } else {\r\n    routes = (\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/premium\" component={Checkout} />\r\n        <Route exact path=\"/signup\" component={Register} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Elements stripe={stripePromise}>{routes}</Elements>\r\n      <ModalContainer />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  darkModeDefault: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = ({ firebase }) => ({\r\n  loggedIn: firebase.auth.uid,\r\n  emailVerified: firebase.auth.emailVerified\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}