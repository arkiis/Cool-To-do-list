{"ast":null,"code":"import { NotificationManager } from \"react-notifications\";\nimport { LOGIN_USER, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, SIGNUP_USER, SIGNUP_USER_SUCCESS, SIGNUP_USER_FAILURE, SIGNUP_USER_END, VERIFY_START, VERIFY_SUCCESS, VERIFY_FAIL, CLEAN_UP, DELETE_START, DELETE_FAIL } from \"./type\";\n/**\r\n * Redux Action to SignIn User with Firebase\r\n */\n\n/**\r\n * Redux Action to signup user in Firebase\r\n */\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: SIGNUP_USER\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.password); // Send the verfication email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection(\"users\").doc(res.user.uid).set({\n      userName: data.userName\n    });\n    dispatch({\n      type: SIGNUP_USER_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_USER_FAILURE,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: SIGNUP_USER_END\n  });\n}; //Login action creator\n\nexport const signIn = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: SIGNUP_USER\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: SIGNUP_USER_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_USER_FAILURE,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: SIGNUP_USER_END\n  });\n}; //Logout action creator\n\nexport const signOut = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n    console.log(\"signout fired!\");\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n/**\r\n * Verify email action\r\n */\n\nexport const verifyEmail = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n}; //clean up messages\n\nexport const clean = () => ({\n  type: CLEAN_UP\n}); //Delete user\n\nexport const deleteUser = () => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const user = firebase.auth().currentUser;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: DELETE_START\n  });\n\n  try {\n    await firestore.collection(\"users\").doc(userId).delete();\n  } catch (err) {\n    dispatch({\n      type: DELETE_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/client/src/store/actions/AuthActions.js"],"names":["NotificationManager","LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","SIGNUP_USER","SIGNUP_USER_SUCCESS","SIGNUP_USER_FAILURE","SIGNUP_USER_END","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","CLEAN_UP","DELETE_START","DELETE_FAIL","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","res","auth","createUserWithEmailAndPassword","email","password","user","currentUser","sendEmailVerification","collection","doc","uid","set","userName","err","payload","message","signIn","signInWithEmailAndPassword","signOut","console","log","verifyEmail","clean","deleteUser","userId","delete"],"mappings":"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","sourcesContent":["import { NotificationManager } from \"react-notifications\";\r\nimport {\r\n  LOGIN_USER,\r\n  LOGIN_USER_SUCCESS,\r\n  LOGIN_USER_FAILURE,\r\n  LOGOUT_USER,\r\n  SIGNUP_USER,\r\n  SIGNUP_USER_SUCCESS,\r\n  SIGNUP_USER_FAILURE,\r\n  SIGNUP_USER_END,\r\n  VERIFY_START,\r\n  VERIFY_SUCCESS,\r\n  VERIFY_FAIL,\r\n  CLEAN_UP,\r\n  DELETE_START,\r\n  DELETE_FAIL\r\n} from \"./type\";\r\n\r\n/**\r\n * Redux Action to SignIn User with Firebase\r\n */\r\n\r\n/**\r\n * Redux Action to signup user in Firebase\r\n */\r\nexport const signUp = data => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  dispatch({ type: SIGNUP_USER });\r\n  try {\r\n    const res = await firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(data.email, data.password);\r\n\r\n    // Send the verfication email\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n\r\n    await firestore\r\n      .collection(\"users\")\r\n      .doc(res.user.uid)\r\n      .set({\r\n        userName: data.userName\r\n      });\r\n    dispatch({\r\n      type: SIGNUP_USER_SUCCESS\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: SIGNUP_USER_FAILURE, payload: err.message });\r\n  }\r\n  dispatch({ type: SIGNUP_USER_END });\r\n};\r\n\r\n//Login action creator\r\nexport const signIn = data => async (dispatch, getState, { getFirebase }) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: SIGNUP_USER });\r\n  try {\r\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\r\n    dispatch({ type: SIGNUP_USER_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: SIGNUP_USER_FAILURE, payload: err.message });\r\n  }\r\n  dispatch({ type: SIGNUP_USER_END });\r\n};\r\n\r\n//Logout action creator\r\nexport const signOut = () => async (dispatch, getState, { getFirebase }) => {\r\n  const firebase = getFirebase();\r\n  try {\r\n    await firebase.auth().signOut();\r\n\r\n    console.log(\"signout fired!\");\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n};\r\n\r\n/**\r\n * Verify email action\r\n */\r\nexport const verifyEmail = () => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase }\r\n) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: VERIFY_START });\r\n  try {\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n    dispatch({ type: VERIFY_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: VERIFY_FAIL, payload: err.message });\r\n  }\r\n};\r\n\r\n//clean up messages\r\nexport const clean = () => ({\r\n  type: CLEAN_UP\r\n});\r\n\r\n//Delete user\r\nexport const deleteUser = () => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  const user = firebase.auth().currentUser;\r\n  const userId = getState().firebase.auth.uid;\r\n  dispatch({ type: DELETE_START });\r\n  try {\r\n    await firestore\r\n      .collection(\"users\")\r\n      .doc(userId)\r\n      .delete();\r\n  } catch (err) {\r\n    dispatch({ type: DELETE_FAIL, payload: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}