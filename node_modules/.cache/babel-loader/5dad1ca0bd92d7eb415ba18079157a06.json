{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\cool-todo-list\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport Header from \"./components/layout/Header\";\nimport { NotificationContainer } from \"react-notifications\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Content from \"./components/layout/Content\";\nimport { ProjectsProvider, SelectedProjectProvider } from \"./context\";\nimport PropTypes from \"prop-types\";\n\nconst App = ({\n  darkModeDefault = false,\n  loggedIn,\n  emailVerified\n}) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\n  let routes;\n\n  if (loggedIn && !emailVerified) {\n    routes = React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(SelectedProjectProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(ProjectsProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    \"data-testid\": \"application\",\n    className: darkMode ? \"darkmode\" : undefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, routes, \" \"), \";\"));\n};\n\nApp.propTypes = {\n  darkModeDefault: PropTypes.bool\n};\n\nconst mapStateToProps = ({\n  firebase\n}) => ({\n  loggedIn: firebase.auth.uid,\n  emailVerified: firebase.auth.emailVerified\n});\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/src/App.js"],"names":["React","useState","Header","NotificationContainer","Route","Redirect","Switch","connect","Content","ProjectsProvider","SelectedProjectProvider","PropTypes","App","darkModeDefault","loggedIn","emailVerified","darkMode","setDarkMode","routes","undefined","propTypes","bool","mapStateToProps","firebase","auth","uid"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,gBAAT,EAA2BC,uBAA3B,QAA0D,WAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,eAAe,GAAG,KAApB;AAA2BC,EAAAA,QAA3B;AAAqCC,EAAAA;AAArC,CAAD,KAA0D;AACpE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAACY,eAAD,CAAxC;AACA,MAAIK,MAAJ;;AACA,MAAIJ,QAAQ,IAAI,CAACC,aAAjB,EAAgC;AAC9BG,IAAAA,MAAM,GACJ,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAED,SACE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,mBAAY,aADd;AAEE,IAAA,SAAS,EAAEF,QAAQ,GAAG,UAAH,GAAgBG,SAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGD,MAJH,EAIW,GAJX,CADF,MADF,CADF;AAaD,CAxBD;;AA0BAN,GAAG,CAACQ,SAAJ,GAAgB;AACdP,EAAAA,eAAe,EAAEF,SAAS,CAACU;AADb,CAAhB;;AAIA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAmB;AACzCT,EAAAA,QAAQ,EAAES,QAAQ,CAACC,IAAT,CAAcC,GADiB;AAEzCV,EAAAA,aAAa,EAAEQ,QAAQ,CAACC,IAAT,CAAcT;AAFY,CAAnB,CAAxB;;AAKA,eAAeR,OAAO,CAACe,eAAD,CAAP,CAAyBV,GAAzB,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Header from \"./components/layout/Header\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Content from \"./components/layout/Content\";\r\nimport { ProjectsProvider, SelectedProjectProvider } from \"./context\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst App = ({ darkModeDefault = false, loggedIn, emailVerified }) => {\r\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\r\n  let routes;\r\n  if (loggedIn && !emailVerified) {\r\n    routes = (\r\n      <Switch>\r\n        <Content />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SelectedProjectProvider>\r\n      <ProjectsProvider>\r\n        <main\r\n          data-testid=\"application\"\r\n          className={darkMode ? \"darkmode\" : undefined}\r\n        >\r\n          {routes}{\" \"}\r\n        </main>\r\n        ;\r\n      </ProjectsProvider>\r\n    </SelectedProjectProvider>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  darkModeDefault: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = ({ firebase }) => ({\r\n  loggedIn: firebase.auth.uid,\r\n  emailVerified: firebase.auth.emailVerified\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}