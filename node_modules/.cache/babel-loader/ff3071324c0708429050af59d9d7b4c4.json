{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\cool-todo-list\\\\src\\\\components\\\\Auth\\\\Login.js\";\nimport React, { useEffect } from \"react\"; // Redux\n\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { labels } from \"../../constants/index\"; // Actions\n\nimport { signUp, clean } from \"../../store/actions\";\nimport { hideModal } from \"../../store/actions/ModalActions\";\nimport Input from \"../Forms/Input.js\";\nimport Message from \"../Message\";\nimport Modal from \"../Modal\";\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email(`email dosen't work :/`).required(\"You need an email silly!\"),\n  password: Yup.string().required(\"You need a password silly!\")\n});\n\nconst Login = ({\n  SignUpSchema,\n  onSubmit,\n  loading,\n  error,\n  hideModal,\n  clean\n}) => {\n  return React.createElement(Formik, {\n    initialValues: {\n      userName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      acceptedTerms: false\n    },\n    validationSchema: SignUpSchema,\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      await signUp(values);\n      setSubmitting(false);\n      onSubmit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, ({\n    isSubmitting,\n    isValid\n  }) => React.createElement(Modal, {\n    title: \"Sign In\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"signUpWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    label: labels.username,\n    name: \"userName\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"email\",\n    label: labels.email,\n    name: \"email\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"password\",\n    label: labels.password,\n    name: \"password\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"password\",\n    label: labels.confirmPassword,\n    name: \"confirmPassword\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"authCheckbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    label: labels.terms,\n    name: \"acceptedTerms\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    disabled: !isValid || isSubmitting,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Create My Account\"), loading && React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Message, {\n    error: true,\n    show: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, NotificationManager.error({\n    error\n  }))))));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => ({\n  loading: auth.loading,\n  error: auth.error\n});\n\nconst mapDispatchToProps = {\n  signUp: signUp,\n  hideModal: () => hideModal(),\n  cleanUp: clean\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/src/components/Auth/Login.js"],"names":["React","useEffect","connect","NotificationManager","LinearProgress","Formik","Field","Form","Yup","labels","signUp","clean","hideModal","Input","Message","Modal","LoginSchema","object","shape","email","string","required","password","Login","SignUpSchema","onSubmit","loading","error","userName","confirmPassword","acceptedTerms","values","setSubmitting","isSubmitting","isValid","username","terms","textAlign","mapStateToProps","auth","mapDispatchToProps","cleanUp"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { labels } from \"../../constants/index\";\r\n// Actions\r\nimport { signUp, clean } from \"../../store/actions\";\r\nimport { hideModal } from \"../../store/actions/ModalActions\";\r\nimport Input from \"../Forms/Input.js\";\r\nimport Message from \"../Message\";\r\n\r\nimport Modal from \"../Modal\";\r\n\r\nconst LoginSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(`email dosen't work :/`)\r\n    .required(\"You need an email silly!\"),\r\n  password: Yup.string().required(\"You need a password silly!\")\r\n});\r\n\r\nconst Login = ({\r\n  SignUpSchema,\r\n  onSubmit,\r\n  loading,\r\n  error,\r\n  hideModal,\r\n  clean\r\n}) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        userName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        acceptedTerms: false\r\n      }}\r\n      validationSchema={SignUpSchema}\r\n      onSubmit={async (values, { setSubmitting }) => {\r\n        await signUp(values);\r\n        setSubmitting(false);\r\n        onSubmit();\r\n      }}\r\n    >\r\n      {({ isSubmitting, isValid }) => (\r\n        <Modal title=\"Sign In\">\r\n          <Form className=\"signUpWrapper\">\r\n            <Field\r\n              type=\"text\"\r\n              label={labels.username}\r\n              name=\"userName\"\r\n              component={Input}\r\n            />\r\n            <Field\r\n              type=\"email\"\r\n              label={labels.email}\r\n              name=\"email\"\r\n              component={Input}\r\n            />\r\n            <Field\r\n              type=\"password\"\r\n              label={labels.password}\r\n              name=\"password\"\r\n              component={Input}\r\n            />\r\n            <Field\r\n              type=\"password\"\r\n              label={labels.confirmPassword}\r\n              name=\"confirmPassword\"\r\n              component={Input}\r\n            />\r\n            <div className=\"authCheckbox\">\r\n              <Field\r\n                type=\"checkbox\"\r\n                label={labels.terms}\r\n                name=\"acceptedTerms\"\r\n                component={Input}\r\n              />\r\n            </div>\r\n\r\n            <button disabled={!isValid || isSubmitting} type=\"submit\">\r\n              Create My Account\r\n            </button>\r\n            {loading && (\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <LinearProgress />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <Message error show={error}>\r\n                {NotificationManager.error({ error })}\r\n              </Message>\r\n            </div>\r\n          </Form>\r\n        </Modal>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  loading: auth.loading,\r\n  error: auth.error\r\n});\r\nconst mapDispatchToProps = {\r\n  signUp: signUp,\r\n  hideModal: () => hideModal(),\r\n  cleanUp: clean\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"]},"metadata":{},"sourceType":"module"}