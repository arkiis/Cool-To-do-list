{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\cool-todo-list\\\\src\\\\components\\\\layout\\\\Header.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\nimport PropTypes from \"prop-types\";\nimport Logo from \"../Logo\";\nimport AddTask from \"../AddTask\";\nimport NavLinks from \"../NavLinks\";\nimport { connect } from \"react-redux\";\nimport { showModal } from \"../../store/actions/ModalActions\";\nimport { LOGIN_MODAL, SIGNUP_MODAL } from \"../../store/actions/type\";\nimport Dropdown from \"../Dropdown\";\nimport { firebase } from \"../../firebase\";\nimport Hamburger from \"../Hamburger\";\nimport HeaderSidebar from \"../layout/HeaderSidebar\";\n\nconst Header = ({\n  darkMode,\n  setDarkMode,\n  loggedIn,\n  showModal,\n  emailVerified\n}) => {\n  const [shouldShowMain, setShouldShowMain] = useState(false);\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n  const [showHeaderSidebar, setShowHeaderSidebar] = useState(false);\n  let links;\n\n  const showSideMenu = () => {\n    setShowHeaderSidebar(!showHeaderSidebar);\n  };\n\n  const closeSidebar = e => {\n    if (e.target.id === \"sidebar\") {\n      showSideMenu();\n    }\n  };\n\n  const showLoginMenu = () => {\n    showModal(LOGIN_MODAL);\n  };\n\n  const showSignupMenu = () => {\n    showModal(SIGNUP_MODAL);\n  };\n\n  if (loggedIn.uid) {\n    console.log(\"loggedIn.uid\", loggedIn);\n    console.log(\"firebase\", firebase);\n    links = React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      \"data-testid\": \"quick-add-task-action\",\n      className: \"settings__add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Quick Add Task\",\n      onClick: () => {\n        setShowQuickAddTask(true);\n        setShouldShowMain(true);\n      },\n      onKeyDown: () => {\n        setShowQuickAddTask(true);\n        setShouldShowMain(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"+\")), React.createElement(\"li\", {\n      \"data-testid\": \"dark-mode-action\",\n      className: \"settings__darkmode\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Darkmode on/off\",\n      type: \"button\",\n      onClick: () => setDarkMode(!darkMode),\n      onKeyDown: () => setDarkMode(!darkMode),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, darkMode ? React.createElement(FaSun, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }) : React.createElement(FaMoon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), React.createElement(Dropdown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(AddTask, {\n      showAddTaskMain: false,\n      shouldShowMain: shouldShowMain,\n      showQuickAddTask: showQuickAddTask,\n      setShowQuickAddTask: setShowQuickAddTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  } else {\n    links = React.createElement(React.Fragment, null, React.createElement(NavLinks, {\n      link: \"/premium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Premium\"), React.createElement(NavLinks, {\n      close: showSideMenu,\n      clicked: showLoginMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Login\"), React.createElement(NavLinks, {\n      clicked: showSignupMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Signup\"));\n  }\n\n  return loggedIn.uid && !emailVerified ? null : React.createElement(React.Fragment, null, React.createElement(\"header\", {\n    className: \"header\",\n    \"data-testid\": \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Logo, {\n    loggedIn: loggedIn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"settings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: `${!loggedIn.uid ? \"linksWrapper\" : \"\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, links), !loggedIn.uid && React.createElement(Hamburger, {\n    showSideMenu: showSideMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    id: \"sidebar\",\n    onClick: e => closeSidebar(e),\n    className: `${showHeaderSidebar && \"headerSidebarOverlay\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, !loggedIn.uid && React.createElement(HeaderSidebar, {\n    links: links,\n    showHeaderSidebar: showHeaderSidebar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  showModal: modelType => dispatch(showModal(modelType))\n});\n\nexport default connect(null, mapDispatchToProps)(Header);\nHeader.propTypes = {\n  darkMode: PropTypes.bool.isRequired,\n  setDarkMode: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/src/components/layout/Header.js"],"names":["React","useState","useEffect","FaMoon","FaSun","PropTypes","Logo","AddTask","NavLinks","connect","showModal","LOGIN_MODAL","SIGNUP_MODAL","Dropdown","firebase","Hamburger","HeaderSidebar","Header","darkMode","setDarkMode","loggedIn","emailVerified","shouldShowMain","setShouldShowMain","showQuickAddTask","setShowQuickAddTask","showHeaderSidebar","setShowHeaderSidebar","links","showSideMenu","closeSidebar","e","target","id","showLoginMenu","showSignupMenu","uid","console","log","mapDispatchToProps","dispatch","modelType","propTypes","bool","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaMoon, FaSun } from \"react-icons/fa\";\r\nimport PropTypes from \"prop-types\";\r\nimport Logo from \"../Logo\";\r\nimport AddTask from \"../AddTask\";\r\nimport NavLinks from \"../NavLinks\";\r\nimport { connect } from \"react-redux\";\r\nimport { showModal } from \"../../store/actions/ModalActions\";\r\nimport { LOGIN_MODAL, SIGNUP_MODAL } from \"../../store/actions/type\";\r\nimport Dropdown from \"../Dropdown\";\r\nimport { firebase } from \"../../firebase\";\r\nimport Hamburger from \"../Hamburger\";\r\nimport HeaderSidebar from \"../layout/HeaderSidebar\";\r\nconst Header = ({\r\n  darkMode,\r\n  setDarkMode,\r\n  loggedIn,\r\n  showModal,\r\n  emailVerified\r\n}) => {\r\n  const [shouldShowMain, setShouldShowMain] = useState(false);\r\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\r\n  const [showHeaderSidebar, setShowHeaderSidebar] = useState(false);\r\n\r\n  let links;\r\n\r\n  const showSideMenu = () => {\r\n    setShowHeaderSidebar(!showHeaderSidebar);\r\n  };\r\n  const closeSidebar = e => {\r\n    if (e.target.id === \"sidebar\") {\r\n      showSideMenu();\r\n    }\r\n  };\r\n\r\n  const showLoginMenu = () => {\r\n    showModal(LOGIN_MODAL);\r\n  };\r\n  const showSignupMenu = () => {\r\n    showModal(SIGNUP_MODAL);\r\n  };\r\n\r\n  if (loggedIn.uid) {\r\n    console.log(\"loggedIn.uid\", loggedIn);\r\n    console.log(\"firebase\", firebase);\r\n    links = (\r\n      <>\r\n        <li data-testid=\"quick-add-task-action\" className=\"settings__add\">\r\n          <button\r\n            aria-label=\"Quick Add Task\"\r\n            onClick={() => {\r\n              setShowQuickAddTask(true);\r\n              setShouldShowMain(true);\r\n            }}\r\n            onKeyDown={() => {\r\n              setShowQuickAddTask(true);\r\n              setShouldShowMain(true);\r\n            }}\r\n          >\r\n            +\r\n          </button>\r\n        </li>\r\n\r\n        <li data-testid=\"dark-mode-action\" className=\"settings__darkmode\">\r\n          <button\r\n            aria-label=\"Darkmode on/off\"\r\n            type=\"button\"\r\n            onClick={() => setDarkMode(!darkMode)}\r\n            onKeyDown={() => setDarkMode(!darkMode)}\r\n          >\r\n            {darkMode ? <FaSun /> : <FaMoon />}\r\n          </button>\r\n        </li>\r\n\r\n        <Dropdown />\r\n\r\n        <AddTask\r\n          showAddTaskMain={false}\r\n          shouldShowMain={shouldShowMain}\r\n          showQuickAddTask={showQuickAddTask}\r\n          setShowQuickAddTask={setShowQuickAddTask}\r\n        />\r\n      </>\r\n    );\r\n  } else {\r\n    links = (\r\n      <>\r\n        <NavLinks link=\"/premium\">Premium</NavLinks>\r\n        <NavLinks close={showSideMenu} clicked={showLoginMenu}>\r\n          Login\r\n        </NavLinks>\r\n        <NavLinks clicked={showSignupMenu}>Signup</NavLinks>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return loggedIn.uid && !emailVerified ? null : (\r\n    <>\r\n      <header className=\"header\" data-testid=\"header\">\r\n        <nav>\r\n          <Logo loggedIn={loggedIn} />\r\n          <div className=\"settings\">\r\n            <ul className={`${!loggedIn.uid ? \"linksWrapper\" : \"\"}`}>\r\n              {links}\r\n            </ul>\r\n            {!loggedIn.uid && <Hamburger showSideMenu={showSideMenu} />}\r\n          </div>\r\n        </nav>\r\n        <div\r\n          id=\"sidebar\"\r\n          onClick={e => closeSidebar(e)}\r\n          className={`${showHeaderSidebar && \"headerSidebarOverlay\"}`}\r\n        >\r\n          {!loggedIn.uid && (\r\n            <HeaderSidebar\r\n              links={links}\r\n              showHeaderSidebar={showHeaderSidebar}\r\n            />\r\n          )}\r\n        </div>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  showModal: modelType => dispatch(showModal(modelType))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n\r\nHeader.propTypes = {\r\n  darkMode: PropTypes.bool.isRequired,\r\n  setDarkMode: PropTypes.func.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}