{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\cool-todo-list\\\\src\\\\components\\\\Auth\\\\Register.js\";\nimport React from \"react\"; // Redux\n\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { NotificationManager } from \"react-notifications\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\"; // Actions\n\nimport { signUp } from \"../../store/actions\";\nconst SignUpSchema = Yup.object().shape({\n  userName: Yup.string().required(\"You need a username silly!\").min(3, \"Too short\").max(25, \"Too long\"),\n  email: Yup.string().email(`email dosen't work :/`).required(\"You need an email silly!\"),\n  password: Yup.string().required(\"You need a password silly!\").min(8, \"Too short\"),\n  confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], `Password doesn't match`).required(\"You need to confirm your password\")\n});\n\nconst Register = ({\n  signUp,\n  loading,\n  error\n}) => {\n  return React.createElement(Formik, {\n    initialValues: {\n      userName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      acceptedTerms: false\n    },\n    validationSchema: SignUpSchema,\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      await signUp(values);\n      setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = ({\n  auth\n}) => ({\n  loading: auth.loading,\n  error: auth.error\n});\n\nconst mapDispatchToProps = {\n  signUp: signUp\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/src/components/Auth/Register.js"],"names":["React","bindActionCreators","connect","Link","NotificationManager","LinearProgress","KeyboardBackspaceIcon","Formik","Field","Form","Yup","signUp","SignUpSchema","object","shape","userName","string","required","min","max","email","password","confirmPassword","oneOf","ref","Register","loading","error","acceptedTerms","values","setSubmitting","mapStateToProps","auth","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,QAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AACA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,MAAMC,YAAY,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,EAAAA,QAAQ,EAAEL,GAAG,CAACM,MAAJ,GACPC,QADO,CACE,4BADF,EAEPC,GAFO,CAEH,CAFG,EAEA,WAFA,EAGPC,GAHO,CAGH,EAHG,EAGC,UAHD,CAD4B;AAKtCC,EAAAA,KAAK,EAAEV,GAAG,CAACM,MAAJ,GACJI,KADI,CACG,uBADH,EAEJH,QAFI,CAEK,0BAFL,CAL+B;AAQtCI,EAAAA,QAAQ,EAAEX,GAAG,CAACM,MAAJ,GACPC,QADO,CACE,4BADF,EAEPC,GAFO,CAEH,CAFG,EAEA,WAFA,CAR4B;AAWtCI,EAAAA,eAAe,EAAEZ,GAAG,CAACM,MAAJ,GACdO,KADc,CACR,CAACb,GAAG,CAACc,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADQ,EACsB,wBADtB,EAEdP,QAFc,CAEL,mCAFK;AAXqB,CAAnB,CAArB;;AAgBA,MAAMQ,QAAQ,GAAG,CAAC;AAAEd,EAAAA,MAAF;AAAUe,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAAD,KAAgC;AAC/C,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbZ,MAAAA,QAAQ,EAAE,EADG;AAEbK,MAAAA,KAAK,EAAE,EAFM;AAGbC,MAAAA,QAAQ,EAAE,EAHG;AAIbC,MAAAA,eAAe,EAAE,EAJJ;AAKbM,MAAAA,aAAa,EAAE;AALF,KADjB;AAQE,IAAA,gBAAgB,EAAEhB,YARpB;AASE,IAAA,QAAQ,EAAE,OAAOiB,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAqC;AAC7C,YAAMnB,MAAM,CAACkB,MAAD,CAAZ;AACAC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAgBD,CAjBD;;AAmBA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAe;AACrCN,EAAAA,OAAO,EAAEM,IAAI,CAACN,OADuB;AAErCC,EAAAA,KAAK,EAAEK,IAAI,CAACL;AAFyB,CAAf,CAAxB;;AAIA,MAAMM,kBAAkB,GAAG;AACzBtB,EAAAA,MAAM,EAAEA;AADiB,CAA3B;AAIA,eAAeT,OAAO,CAAC6B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CR,QAA7C,CAAf","sourcesContent":["import React from \"react\";\r\n// Redux\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n// Actions\r\nimport { signUp } from \"../../store/actions\";\r\n\r\nconst SignUpSchema = Yup.object().shape({\r\n  userName: Yup.string()\r\n    .required(\"You need a username silly!\")\r\n    .min(3, \"Too short\")\r\n    .max(25, \"Too long\"),\r\n  email: Yup.string()\r\n    .email(`email dosen't work :/`)\r\n    .required(\"You need an email silly!\"),\r\n  password: Yup.string()\r\n    .required(\"You need a password silly!\")\r\n    .min(8, \"Too short\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], `Password doesn't match`)\r\n    .required(\"You need to confirm your password\")\r\n});\r\n\r\nconst Register = ({ signUp, loading, error }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        userName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        acceptedTerms: false\r\n      }}\r\n      validationSchema={SignUpSchema}\r\n      onSubmit={async (values, { setSubmitting }) => {\r\n        await signUp(values);\r\n        setSubmitting(false);\r\n      }}\r\n    ></Formik>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  loading: auth.loading,\r\n  error: auth.error\r\n});\r\nconst mapDispatchToProps = {\r\n  signUp: signUp\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n"]},"metadata":{},"sourceType":"module"}