{"ast":null,"code":"import { NotificationManager } from \"react-notifications\";\nimport { LOGIN_USER, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, SIGNUP_USER, SIGNUP_USER_SUCCESS, SIGNUP_USER_FAILURE, SIGNUP_USER_END, VERIFY_START, VERIFY_SUCCESS, VERIFY_FAIL } from \"./type\";\n/**\r\n * Redux Action to SignIn User with Firebase\r\n */\n\n/**\r\n * Redux Action to signup user in Firebase\r\n */\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: SIGNUP_USER\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.password); // Send the verfication email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection(\"users\").doc(res.user.uid).set({\n      userName: data.userName\n    });\n    dispatch({\n      type: SIGNUP_USER_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_USER_FAILURE,\n      payload: err.message\n    });\n  }\n};\n/**\r\n * Verify email action\r\n */\n\nexport const verifyEmail = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Owner/Documents/cool-todo-list/src/store/actions/AuthActions.js"],"names":["NotificationManager","LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","SIGNUP_USER","SIGNUP_USER_SUCCESS","SIGNUP_USER_FAILURE","SIGNUP_USER_END","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","res","auth","createUserWithEmailAndPassword","email","password","user","currentUser","sendEmailVerification","collection","doc","uid","set","userName","err","payload","message","verifyEmail"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,qBAApC;AACA,SACEC,UADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,mBANF,EAOEC,mBAPF,EAQEC,eARF,EASEC,YATF,EAUEC,cAVF,EAWEC,WAXF,QAYO,QAZP;AAcA;;;;AAIA;;;;AAGA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI,OAC5BC,QAD4B,EAE5BC,QAF4B,EAG5B;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAH4B,KAIzB;AACH,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMG,SAAS,GAAGF,YAAY,EAA9B;AACAH,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMgB,GAAG,GAAG,MAAMH,QAAQ,CACvBI,IADe,GAEfC,8BAFe,CAEgBV,IAAI,CAACW,KAFrB,EAE4BX,IAAI,CAACY,QAFjC,CAAlB,CADE,CAKF;;AACA,UAAMC,IAAI,GAAGR,QAAQ,CAACI,IAAT,GAAgBK,WAA7B;AACA,UAAMD,IAAI,CAACE,qBAAL,EAAN;AAEA,UAAMT,SAAS,CACZU,UADG,CACQ,OADR,EAEHC,GAFG,CAECT,GAAG,CAACK,IAAJ,CAASK,GAFV,EAGHC,GAHG,CAGC;AACHC,MAAAA,QAAQ,EAAEpB,IAAI,CAACoB;AADZ,KAHD,CAAN;AAMAnB,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD,GAlBD,CAkBE,OAAO4B,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEb,mBAAR;AAA6B4B,MAAAA,OAAO,EAAED,GAAG,CAACE;AAA1C,KAAD,CAAR;AACD;AACF,CA7BM;AA+BP;;;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM,OAC/BvB,QAD+B,EAE/BC,QAF+B,EAG/B;AAAEC,EAAAA;AAAF,CAH+B,KAI5B;AACH,QAAME,QAAQ,GAAGF,WAAW,EAA5B;AACAF,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMiB,IAAI,GAAGR,QAAQ,CAACI,IAAT,GAAgBK,WAA7B;AACA,UAAMD,IAAI,CAACE,qBAAL,EAAN;AACAd,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACD,GAJD,CAIE,OAAOwB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAET,WAAR;AAAqBwB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAAlC,KAAD,CAAR;AACD;AACF,CAdM","sourcesContent":["import { NotificationManager } from \"react-notifications\";\r\nimport {\r\n  LOGIN_USER,\r\n  LOGIN_USER_SUCCESS,\r\n  LOGIN_USER_FAILURE,\r\n  LOGOUT_USER,\r\n  SIGNUP_USER,\r\n  SIGNUP_USER_SUCCESS,\r\n  SIGNUP_USER_FAILURE,\r\n  SIGNUP_USER_END,\r\n  VERIFY_START,\r\n  VERIFY_SUCCESS,\r\n  VERIFY_FAIL\r\n} from \"./type\";\r\n\r\n/**\r\n * Redux Action to SignIn User with Firebase\r\n */\r\n\r\n/**\r\n * Redux Action to signup user in Firebase\r\n */\r\nexport const signUp = data => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  dispatch({ type: SIGNUP_USER });\r\n  try {\r\n    const res = await firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(data.email, data.password);\r\n\r\n    // Send the verfication email\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n\r\n    await firestore\r\n      .collection(\"users\")\r\n      .doc(res.user.uid)\r\n      .set({\r\n        userName: data.userName\r\n      });\r\n    dispatch({\r\n      type: SIGNUP_USER_SUCCESS\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: SIGNUP_USER_FAILURE, payload: err.message });\r\n  }\r\n};\r\n\r\n/**\r\n * Verify email action\r\n */\r\nexport const verifyEmail = () => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase }\r\n) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: VERIFY_START });\r\n  try {\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n    dispatch({ type: VERIFY_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: VERIFY_FAIL, payload: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}